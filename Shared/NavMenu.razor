@inject NavigationManager NavigationManager
@implements IDisposable
<style>
    a {
        color:yellow;
    }
</style>


<div >
    <div>

        <a class="navbar-brand" style=@Style("LangSetup") href="LangSetup">Språk</a>
        <a class="navbar-brand" style=@Style("SimpleList") href ="SimpleList">Ord</a>
        <a class="navbar-brand" style=@Style("Scroll") href ="Scroll">Pugg</a>
        <a class="navbar-brand" style=@Style("ScrollList") href="ScrollList">Liste</a>

        <a class="navbar-brand" href="">Hjelp</a>

    </div>


</div>
@*
<div class="@NavMenuCssClass" @onclick="ToggleNavMenu" >
    <nav class="flex-column" >
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="LangSetup">
                <span aria-hidden="true"></span> Språk
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="SimpleList">
                <span  aria-hidden="true"></span> Velg Ord
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Scroll">
                <span  aria-hidden="true"></span> Pugg
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="ScrollList">
                <span  aria-hidden="true"></span> Pugg Liste
            </NavLink>
        </div>



    </nav>
</div>*@

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected async override Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += LocationChanged;
    }
    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }


    static int i = 0;
    string Style(string pageCurr)
    {
        if (page == pageCurr)
            return "color:yellow;text-decoration:underline;";
        return "color:white";
    }


    static string GetPage(string location)
    {
        string[] a = location.Split(@"/");
        string? s = a.LastOrDefault();
        return s ?? "";
    }
    static string page = "";
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        page = GetPage(e.Location);
        StateHasChanged();
    }
}
