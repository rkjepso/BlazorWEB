@page "/scroll"

@using static BlazorWEB.Functions;
@inject NavigationManager NavigationManager
@using BlazorWEB.Services;

@inject IJSRuntime JS
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IStorage IStorage

<Flags Text=@(StrFlag) SwapLang="@SwapWord" OnSwapEv="@OnSwapLanguage"></Flags>


<style>
    .fromWord, .toWord {
        width: 100%;
        font-size: 2rem;
        display: inline-block;
        margin: 0.1rem 0 0.2rem 0;
        color: var(--TextColor2);
        text-align:center;
    }

    .toWord {
        animation-iteration-count: infinite;
        animation-duration: @StrMsPugg;
        display: normal;
        animation-name: pugging0;
        align-content: center;
        margin: 0.1rem 0 .5rem 0;
    }


    .coolDiv {
        user-select: none;
        line-height: 0.8;
        width: 100%;
        margin: 6px 2px 10px 0px;
        border-radius: 0;
        text-align: center;
    }


    .ps {
        color: blue;
        display: inline-block;
    }


    .coolSpan, p {
        white-space: nowrap;
    }

    .wordinfo {
        text-align: left;
    }

    .stack {
        text-align: center;
        font-size: 1rem;
        padding: 0rem;
        margin: -0.2rem;
    }

    .wordinfo, .smiley, .level {
        padding: 1rem 0rem 0rem 0rem;
    }

    .level {
        padding: 1rem 1rem 0rem 1rem;
        text-align:right;
    }

    .bottomrow td, .coolDiv td {
        padding:0.3rem 0.5rem 0.3rem;
 /*       border: 1px solid grey;*/
    }

   
    table {
        table-layout:fixed;
        width:100%;
    }

    @@keyframes pugging0 {
        0% {
            opacity: 0.0;
            background-image: var(--PanelBkImg);
        }

        40% {
            color: var(--TextColorToWord);
            opacity: 0.0;
        }

        100% {
            color: var(--TextColorToWord);
        }
    }
    
    .coolDiv {
        border:1px solid white;
    /*    background-color:black;
        padding: 1rem 0rem 0rem;*/
       
    }
    
    </style>

<span class="coolSpan">
    <button class="coolButton" onclick="@(()=>OnRestart())"> ⟳ </button>
    <img class="imgSmileyButton" @onclick="@(()=>OnChangeSmiley())" src=@Smileys[SmileyIndex]>
</span>

<span class="coolSpan">
    @{
        var ams = new (int, string)[] { (1000, "1"), (1500, ".5"), (2000, "2"), (3000, "3"), (5000, "5") };

        foreach (var t in ams)
        {
            int ms = t.Item1;
            string label = t.Item2;
                                                                                                                            <button class=@Csscontrol.BoolStyle(MsPugg == ms) @onclick="@(()=>OnMsInterval(ms))"> @label </button>
        }
                                            <button class=@Csscontrol.BoolStyle(UseEnglish)
            style="width:auto"
                                                    @onclick="@OnEnglish">
                                                Eng
                                            </button>
    }
</span>


<InfoBox @bind-strError="@StrError" @bind-strWarn="@StrWarn" @bind-strSuccess="@StrSuccess"></InfoBox>
@if (Word != null)
{
    int i = 0;
    TWord w = Word;
    <div class="coolDiv" hidden=@(Tot()==0) @onclick="@(()=>OnRremoveWord())">
        <table >
            <thead>
                <tr>
                    <th style="width:20%"></th>
                    <th style="width:60%"></th>
                    <th style="width:20%"></th>
                </tr>
            </thead>
            <tr >
                <td>      
                </td>
         
                <td>
                    <p class="fromWord">
                        @if (w.IsDeleted)
                        {
                            <img class="imgCheck" style="user-select:unset;margin:0rem; padding:-3px 1rem" src="Img/Ok2.png" />
                            
                        }
                        @FromWordD(w)
                    </p>
                </td>
                <td style="text-align:right">
        
                </td>
            </tr>

            <tr>
                <td>
                </td>
                <td>
                    <p class="toWord" id=@StrAni(i)>@ToWordD(w)</p>
                </td>
      
                <td>
                </td>
            </tr>


        </table>
        <table>
            <tr>
                <th style="width:20%;padding:0.5rem"></th>
                <th style="width:60%"></th>
                <th style="width:20%"></th>
            </tr>
    
            <tr class="bottomrow">
                <td style="text-align:left">
                    @(i == 0 ? StrRest : "")
                </td>
                <div style="text-align:center">
                    <img class="imgSmileyButton" style="user-select:unset;" src=@GetSmiley(NewLevel(w)) />
                </div>

                <td style="text-align:right">
                    @NewLevel(w)%
                </td>
            </tr>
        </table>
    </div>

    <div class="stack">
        @for (int x = 0; x < Math.Min(stkWords.Count, 5); x++)
        {
            var ws = stkWords.ToArray()[x];
            <p class="stack" style="@StyleStack(x)">

                @FromWord(ws) - @ToWordD(ws) @NewLevel(ws) %
            </p>
        }
    </div>

}

@*<img class="imgSmileyButton" style="user-select:unset" src=@GetSmiley(NewLevel(ws))>*@
@code {
#pragma warning disable 1998, 8618, 8625, 4014, 8622
    string FromWordD(TWord w)
    {
        string s = FromWord(w);
        //if (w.IsDeleted)
        //    s = $"\u2714 {s}";
        return s;
    }
    string FromWord(TWord w)
    {
        return $"{(SwapWord ? w.ToWord : w.FromWord)}  ";
    }

    string StyleStack(int x)
    {
        var ws = stkWords.ToArray()[x];
        double op = 0.75 - x / 7.0;
        string ss = $"opacity:{op}";
        return ss;
    }

    string ClsEngImage() => UseEnglish ? "engImage" : "engImageGray";

    string ToWordD(TWord w)
    {
        return (SwapWord ? w.FromWord : w.ToWord) + (UseEnglish ? $" / {w.ToWordEnglish}" : "");
    }

    private bool IsRunning => timerW?.Enabled ?? false;

    async Task OnStopp()
    {
        ((IJSInProcessRuntime)JS).InvokeVoid("reset_animation", StrAni(0), 10000);
        timerW?.Stop();
        timerW ??= null;
    }

    string Cls(int i) => $"toWord{i}";
    string StrAni(int i) => $"animated{i}";
    }


<HelpBox StrInfo="@StrInfo" StrTitle="@StrTitle" EvStateHasChanged="StateHasChanged"></HelpBox>

    @code {
    public string StrFlag => IStorage._GetData().Info;
    private string StrError { get; set; } = "";
    private string StrWarn { get; set; } = "ccc";
    private string StrInfo { get; set; } = "";
    private string StrSuccess { get; set; } = "";
    private string StrTitle { get; set; } = "";
    private bool UseEnglish { get; set; } = false;
    public void OnEnglish()
    {
        UseEnglish = !UseEnglish;
    }
    public string StrRest
    {
        get
        {
            int tot = lstWordsSav?.Count ?? 0;
            int rest = lstWords?.Count ?? 0;
            return $"{tot - rest} av {tot}";
        }
    }
    private List<TWord> lstWords = null;
    private List<TWord> lstWordsSav = null;
    private Stack<TWord> stkWords = null;

    private System.Timers.Timer timerW;
    //private List<TWord> Word = new();
    private TWord Word;

    private int Tot() => lstWords?.Count ?? 0;

    public string ShowWord { get; set; }


    protected async override Task OnInitializedAsync()
    {
        StrTitle = @"Pugg ord i tilfeldig rekkefølge";
        StrInfo = @"Trykk på ordet for å fjerne.
Puggelisten blir kortere , smileyen til ordet blidere.
⟳ ny puggerunde.
Trykk på flagget - skifte puggeretning.
Det engelske flagget gir også det engelske ordet.
Smileyen ved ⟳ er et filter, slik at du kan velge å pugge bare 'sure' ord.";


        try
        {
            StrWarn = "";

            lstWords = new();
            lstWordsSav = new();
            stkWords = new();
            lstWords = Program.GetSelectedWords();
            if (Misc.IsNullOrEmpty(lstWords))
                throw new Exception("Du må velge språk/ord !");

            timerW = null;
            timerW = new System.Timers.Timer();
            timerW.Elapsed += new System.Timers.ElapsedEventHandler(OnTimerWord);
            timerW.Interval = 300;

            MsPugg = Math.Max(500, IStorage._GetData().MsPugg);
            SmileyIndex = Math.Min(Smileys.Length - 1, IStorage._GetData().SmileyIndex);
            UseEnglish = IStorage._GetData().UseEnglish;

            lstWords = lstWords.Where(w => GetSmileyIndex(w.Level) <= SmileyIndex).ToList();
            lstWordsSav.AddMany(lstWords);

            timerW.Start();
            stkWords.Clear();
            Program.currentStateHasChanged = StateHasChanged;

            if (Tot() == 0)
            {
                StrWarn = "Listen av ord er tom. Endre smiley filter ?";
                return;
            }
        }
        catch (Exception e)
        {
            StrError = e.Message;
        }
    }

    private Random r = new Random();

    async void OnTimerWord(object sender, System.Timers.ElapsedEventArgs e)
    {
        var lst = lstWords?.FindRandomWords(1) ?? null;
        if (lst == null || lst.Count == 0)
            return;


        Word = lst[0];
        timerW.Interval = MsPugg;

        var i = lstWordsSav.FindIndex(ws => ws.ID == Word.ID);
        if (i >= 0 && !Word.IsDeleted)
            lstWordsSav[i].Counter++;

        _ = Task.Run(() => OnResetAnimation());
        StateHasChanged();
    }

    void OnRremoveWord()
    {
        if (Word.IsDeleted)
            return;

        try
        {
            lstWords.Remove(Word);
            Word.IsDeleted = true;
            Word.Level += Math.Min(100, Math.Max(1, 5 - Word.Counter));
            stkWords.Push(Word);
            Program.UpdateSelectedWord(Word);
            if (lstWords.Count == 0)
            {
                StrSuccess = "Pugge runden er ferdig. Trykk ⟳ for en ny runde.";
                timerW?.Stop();
                timerW = null;
                return;
            }
        }
        catch (Exception e)
        {
            StrError = e.Message;
        }
        if (lstWords.Count == 0)
            return;
    }

    int NewLevel(TWord w) => w.Level;

    async void OnRestart()
    {
        StrSuccess = "";
        timerW?.Dispose();

        await OnInitializedAsync();
    }

    private bool SwapWord { get; set; } = false;
    void OnSwapLanguage()
    {
        SwapWord = !SwapWord;
    }

    async Task OnResetAnimation()
    {
        try
        {
            int sec = MsPugg / 1000;
            ((IJSInProcessRuntime)JS).InvokeVoid("reset_animation", StrAni(0), sec);
        }
        catch (Exception e)
        {
            StrError = e.Message;
        }
    }

    private int MsPugg { get; set; } = 2000;
    private string StrMsPugg { get => $"{MsPugg}ms"; }
    void OnMsInterval(int ms)
    {
        MsPugg = ms;
        SaveData();
        if (Tot() == 0)
        {
            StrWarn = "List is rempty. Change Smiley ?";
            return;
        }
        if (timerW != null)
            timerW.Interval = ms;

        _ = Task.Run(() => OnResetAnimation());

    }


    void IDisposable.Dispose()
    {
        SaveData();
        timerW?.Dispose();        // because you need it here

    }

    async Task SaveData()
    {
        Data data = IStorage._GetData();
        data.MsPugg = MsPugg;
        data.SmileyIndex = SmileyIndex;
        data.UseEnglish = UseEnglish;
        IStorage._SetData(data);
    }
    void OnListe()
    {
        NavigationManager.NavigateTo("/Gloser");
    }
    private int SmileyIndex { get; set; } = Smileys.Length - 1;
    async void OnChangeSmiley()
    {
        SmileyIndex--;
        if (SmileyIndex < 0)
            SmileyIndex = Smileys.Length - 1;
        SaveData();
        OnRestart();
    }
    }






