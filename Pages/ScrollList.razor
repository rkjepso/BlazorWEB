@page "/ScrollList"
@using static BlazorWEB.Functions;
@using System.Timers;
@using BlazorWEB.Services;
@inject HttpClient Http
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using static Program;
@implements IDisposable
@inject IStorage IStorage


<Csscontrol></Csscontrol>

<Flags Text="@StrFlag" SwapLang="@SwapWord" OnSwapEv="@OnSwapWord"></Flags>


<button class="coolButton" @onclick="@(()=>OnReset(true))"> ⟳ </button>
<button class="btn_ghost"></button>

<span class="coolSpan">
    @foreach (var n in new[] { 4, 8, 16 })
    {
        <button class=@Csscontrol.BoolStyle(n==Size) @onclick="@(()=>OnSize(n))">@(n)</button>
    }
</span>

<button class="btn_ghost"></button>

<span class="coolSpan">
    @{
        var ams = new (int, string)[] { (1000, "1s"), (1500, ".5"), (2000, "2s"), (3000, "3s"), (5000, "5s") };
        foreach (var t in ams)
        {
            int ms = t.Item1;
            string label = t.Item2;

            <button class=@Csscontrol.BoolStyle(ms==MsWord) @onclick="@(()=>OnBlinkInterval(ms))">@(label)</button>
        }
    }
</span>


<InfoBox @bind-strError="@StrError" @bind-strWarn="@StrWarn" @bind-strSuccess="@StrSuccess"></InfoBox>
<HelpBox StrTitle="Pugging via Liste" StrInfo="@StrInfo" EvStateHasChanged="StateHasChanged"></HelpBox>

@if (lstWords.IsNullOrEmpty())
{

}
else
{
    <table class="g_blueTable">
        <thead>

            <tr>
                <th style="width:35%">@StrFromLangD()</th>
                <th style="width:35%">@StrToLangD()</th>
                <th style="width:20%">Nivå</th>
                <th style="width:0%"></th>
            </tr>

        </thead>
        <tbody>

            @foreach (var w in lstWords)
            {
                counter = (w == lstWords[0]) ? 0 : counter + 1;
                <tr @onclick="@(()=>OnOk(w))">


                    <td>
                        @if (w.IsCorrect)
                        {
                            <img class="imgSmileyButton" style="user-select:unset;margin:-5px; padding:-3px 5px" src="Img/Ok2.png" />
                            <button class="btn_ghost"></button>
                        }
                        @FromWordD(w)
                    </td>


                    <td class="toWord" style="@OpaCity(counter)">@ToWordD(w)</td>
                    <td>
                        <img class="imgSmileyButton" src=@GetSmiley(w.Level)>@(w.Level)%
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<br />

@code {
    #pragma warning disable 1998, 8622

    private string OpaCity(int i)
    {
        double opacity = 0;
        if (warmup > (i + 1.0) / (RealSize + 1))
            opacity = 1;

        if (Show)
            opacity = 1;

        return $"opacity:{opacity};";
    }

    private bool Random { get; set; } = false;
    private bool IsRunning => timer?.Enabled ?? false;

    private int MsWord { get; set; } = 2000;
    private bool Show = false;
    void OnBlinkInterval(int ms)
    {
        SetTimerInteval(ms);
    }

    void SetTimerInteval(int msPerWord)
    {
        MsWord = msPerWord;
        if (timer != null) 
            timer.Interval = RealSize * msPerWord / slot;
    }


    public int Size { get; set; } = 4;
    private int RealSize => Math.Min(Size, lstWords.Count());
    private void OnSize(int n)
    {
        Size = n;
        OnReset(true);

    }
    private void NewWords()
    {
        warmup = 0;

        lstWords = lstSelected;
        lstWords = lstWords.Where(w => w.IsCorrect == false).ToList();
        lstWords = lstWords.FindRandomWords(Size);
        SetTimerInteval(MsWord);
        SaveData();

        // CheckEmpty
        StateHasChanged();
    }

    void CheckEmpty()
    {
        if (lstWords.Count == 0)
        {
            timer?.Stop();
            timer = null;
            StrSuccess = "Pugging er ferdig. Restart ved å trykke på ⟳-knappen ";
        }
    }

    void OnStopp()
    {
        timer?.Stop();
        timer ??= null;
    }


    int counter = 0;
    static Timer? t2 = null;
    public static void DoAction(Action f, int ms)
    {
        t2 = new Timer(ms);
        t2.Elapsed += (x, y) => { f(); t2.Dispose(); t2 = null; };
        t2.Start();
    }


    public string StrFlag => IStorage._GetData().Info;
    private string StrError { get; set; } = "";
    private string StrWarn { get; set; } = "";
    private string StrSuccess { get; set; } = "";


    private List<TWord> lstWords = new();
    private List<TWord> lstSelected = new();

    static SimpleList? _this = null;

    public static SimpleList? Obj { get => _this; }


    static public List<TWord> LstDict { get; set; } = new();
    static public Dictionary<char, List<TWord>> dictWords { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        StrInfo =
            @"Dersom du kan ordet trykker du ned og får poeng.
        Trykk på en av sekundknappene for å starte.
        Trykk direkte på ordet for å godkjenne / få poeng.
        Knappen ∞ betyr manuel visning.

        Trykk på flagget = puggeretning. ";

        DoInit();
        Program.currentStateHasChanged = StateHasChanged;
        StateHasChanged();
    }

    public void DoInit()
    {
        try
        {

            LstDict = Program.GetDictionary();
            lstWords = new();
            var data = IStorage._GetData();

            SmileyIndex = Math.Min(Smileys.Count()-1, data.SmileyIndex);
            MsWord = data.MsBlink > 0 ? data.MsBlink : 1000;
            Size = data.NumBatch;
            lstWords = Program.GetSelectedWords();
            lstSelected = lstWords;


            StrSuccess = "";
            timer?.Dispose();

            OnBlinking();
            UpdateStrInfo();


            DoAction(StateHasChanged, 10);
        }
        catch (Exception e)
        {
            StrError = "Error - unable to connect to the Server : " + e.Message;
        }

        void UpdateStrInfo()
        {
            int cWords = IStorage._GetData().TotalWords;
            string wordlist = $"({cWords} viktigste)";
            string strLang = LangInNorwegian(GetFromLangFromLangT(Program.BaseDataObj.LangT));
        }
    }
    void OnSave()
    {
        SaveData();

        StrSuccess = $" Lagret ordgruppen : {StrFlag}. ";
        StrSuccess += "Du kan lære deg de valgte ordene under Pugg meny.";
        StateHasChanged();

    }

    void SaveData()
    {
        var data = IStorage._GetData();

        data.SmileyIndex = SmileyIndex;
        data.MsBlink = MsWord;
        data.NumBatch = Size;

        IStorage._SetData(data);
    }


    public string StrInfo { get; set; } = "";



    void OnOk(TWord _w)
    {
        var i = lstWords.FindIndex(w => _w.ID == w.ID);
        if (i == -1)
            return;
        lstWords[i].IsCorrect = !lstWords[i].IsCorrect;
        lstWords[i].Level += lstWords[i].IsCorrect ? 2 : -2;

        var ix = lstSelected.FindIndex(w => _w.ID == w.ID);
        if (ix == -1)
            return;
        lstSelected[ix].IsCorrect = lstWords[i].IsCorrect;
        Program.UpdateSelectedWord(lstWords[i]);
        if (IsAllChecked())
        {
            StateHasChanged();
        }

    }

    bool IsAllChecked()
    {
        return lstWords.Where(w => !w.IsCorrect).Count() == 0;
    }

    void OnReset(bool x)
    {
        OnSave();
        DoInit();
        StateHasChanged();
    }

    private bool SwapWord { get; set; } = false;
    void OnSwapWord()
    {
        SwapWord = !SwapWord;
        lstWords?.ForEach(w => w.ToWordAns = "");
        StateHasChanged();
    }

    string FromWordD(TWord w)
    {
        string s;
        s = $"{(SwapWord ? w.ToWord : w.FromWord)}  ";
        return s;
    }

    string ToWordD(TWord w)
    {
        return $"{(SwapWord ? w.FromWord : w.ToWord)}  ";
    }

    string StrFromLangD()
    {
        if (lstSelected == null)
            return "";

        int corr = lstSelected.Where(w => w.IsCorrect).Count();
        string s = $"({corr}/{lstSelected.Count})";
        return $"{(SwapWord ? StrToLangN : StrFromLangN)} {s}  ";
    }

    string StrToLangD()
    {
        return $"{(SwapWord ? StrFromLangN : StrToLangN)}  ";
    }

    private Timer? timer = null;
    private double warmup;
    private double dx = 0.01;
    private double slot = 100;
    void OnBlinking()
    {
        if (timer != null)
        {
            timer.Stop();
            timer = null;
        }


        timer = new Timer();
        SetTimerInteval(this.MsWord);
        timer.Elapsed += new ElapsedEventHandler(OnTimerWord);
        timer.Start();
        warmup = 0;

        lstWords = lstSelected.FindRandomWords(Size);

        void OnTimerWord(object sender, ElapsedEventArgs e)
        {
            if (timer != null && lstWords.Count > 0)
            {
                warmup += dx;
                if (warmup > 1 || IsAllChecked())
                {
                    warmup = 0;
                    Misc.MyDelay(600);
                    NewWords();
                }
            }
            CheckEmpty();
            StateHasChanged();
            return;
        }
    }




    void IDisposable.Dispose()
    {
        SaveData();
        timer?.Stop();
        timer = null;
    }

    int SmileyIndex = Smileys.Length - 1;
    void OnChangeSmiley()
    {
        SmileyIndex = SmileyIndex - 1;
        if (SmileyIndex < 0)
            SmileyIndex = Smileys.Length - 1;
        OnReset(false);
    }
}



